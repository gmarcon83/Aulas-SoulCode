declaraçao literal => let nomeObj = {propriedede1: valor, propriedede2: valor, etc}

    adicionando propriedades => nomeObj.novaPropriedade = parametros
    removendo propriedades => delete nomeObj.propriedade


Função construtora

    function Carro(marca, modelo) {
        this.marca = marca;
        this.modelo = modelo;
        this.soundHorn = function() {
            console.log("Beep! Beep!");
        }
    }


Instanciando um novo

    let umCarro = new Carro("Ford", "Pampa"); // armazena um obj carro na variavel


funções

    .hasOwnProperty("strg") // caso o objeto possua a propriedade, retorna true
    Object.freeze(nomeObjeto) // Nenhuma propriedade pode ser mais modificada


Acessando parametros

    Podemos acessar usando nomeObj.parametro ou nomeObj[parametro]
    com a segunda maneira podemos usar strings com espaços e variáveis


Iterando

    for..in // Caminha pelas chaves de um objeto;
    Object.keys(nomeObj)// retorna uma array com as chaves do objeto;


Setters e Getters

    get // Define um metodo getter para pegar um valor
    set() // Define um metodo setter para definir um valor

    Exemplo

        const aluno = {
            nome: 'Monica',
            get buscarNome() {        // getter
                return this.nome;
            }
            set mudarNome(novoNome) {   // setter
                this.nome = novoNome;
            }
        };

    aluno.buscarNome -> Retorna o nome Monica
    aluno.mudarNome("Pedro) -> muda o nome para Pedro

    Obs: Podemos adicionar mais funcionalidade dentro de cada função,
         conforme a necessidade.